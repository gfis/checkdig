/*  Class with an array of about 120 methods for checking of German bank account numbers.
 *  @(#)$Id$
 *  Automatically generated by checkdig.xsl + account.xsl from de_account.xml
 *  at 2014-01-21T14:16:24+01:00 - DO NOT EDIT HERE!
 */
/*
 * Copyright 2006 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.teherba.checkdig.account;
import  org.teherba.checkdig.BaseChecker;
import  org.teherba.checkdig.blz.BlzCheckMap;
import  java.io.BufferedReader;
import  java.io.FileReader;
import  java.lang.reflect.Method;
import  java.lang.StringBuffer;

/** Array of generated methods for checking of German bank account numbers,
 *  together with a few hand-crafted methods.
 */
public class DeAccountChecker extends BaseChecker {
    public final static String CVSID = "@(#) $Id: account.xsl 78 2009-02-05 17:11:47Z gfis $";

    /** length of the account number */
    private static final int LEN_ACCOUNT = 10;

    /** numerical value of the account number */
    private long accountValue;

    /** accumulator for computations */
    private long sum;

    /** Bankleitzahl for methods 52, 53 */
    private String blz;

    /** for the determination of the check method from a BLZ */
    private static BlzCheckMap checkMap = new BlzCheckMap();

    /** No-args constructor
     */
    public DeAccountChecker() {
        super();
        digit = new int[LEN_ACCOUNT + 8]; // +1 because [0] is not used; 2 more for methods 52, 53; 6 more for method D1
        accountValue = 0;
    } // Constructor

    /** Sets the BLZ for methods 52, 53
     *  @param blz BLZ (8 digits) to be set
     */
    private void setBLZ(String blz) {
        this.blz = blz;
    } // setBLZ

    /** Gets the locally stored Bankleitzahl
     *  @return 8 digits as String
     */
    private String getBLZ() {
        return  blz;
    } // getBLZ

    /** Sets the positions of the check digit range in the number to
     *  be checked; special version with constant length 1
     *  @param offset offset counted backwards from the end+1 of the check substring:
     *  1 = last (rightmost) digit, or 0 = error
     */
    private void setCheckRange(int offset) {
        if (offset == 0) {
            setCheckRange(0, 0);
        } else {
            setCheckRange(LEN_ACCOUNT - offset, 1); // = super.setCheckRange
        }
    } // setCheckRange

    /** Checks an account number by using some published method.
     *  @param account_blz 10 digits for German account number,
     *  left filled with zeroes, followed by whitespace and
     *  a German BLZ = bank identification number;
     *  (determine the check method from this number)
     *  @return correct(ed) account number;
     *  the check digit is 'X' if it cannot be computed
     */
    public String check(String account_blz) {
        String [] elements = account_blz.split("\\s+");
        String result = check(checkMap.getMethod(elements[1]), elements[0], elements[1]);
        return result + "\t" + elements[1];
    } // check

    /** Checks an account number by using some published method.
     *  @param account 10 digits for German account number,
     *  left filled with zeroes
     *  @param blz German BLZ = bank identification number;
     *  determine the check method from this number
     *  @return correct(ed) account number;
     *  the check digit is 'X' if it cannot be computed
     */
    public String check(String account, String blz) {
        return check(checkMap.getMethod(blz), account, blz);
    } // check

    /** Checks an account number by using some published method.
     *  @param method method to be used for checking, "00".."B8"
     *  @param rawNumber 10 digits for German account number,
     *  left filled with zeroes
     *  @param blz German BLZ = bank identification number
     *  (needed only for methods 52, 53, maybe "" otherwise)
     *  @return original number, return code and correct(ed) account number;
     *  the check digit is 'X' if it cannot be computed
     */
    public String check(String method, String rawNumber, String blz) {
        String result = "";
        String account = trim(rawNumber);
        if (account.length() > LEN_ACCOUNT) { // fatal error
            result = checkResponse(rawNumber, BaseChecker.TOO_LONG);
        } else {
            if (account.length() < LEN_ACCOUNT) { // pad left
                account = ("000000000000000000000").substring(0, LEN_ACCOUNT - account.length()) + account;
            }
            for (int ipos = 1; ipos <= LEN_ACCOUNT; ipos ++) { // split into digits array
                digit[ipos] = Character.digit(account.charAt(LEN_ACCOUNT - ipos), 10);
            } // for ipos
            this.setCheckRange(1); // default: check digit at the end
            this.setBLZ(blz);
            try { // now the reflected call
                this.accountValue = Long.parseLong(account);
                Method generatedMethod = this.getClass().getMethod("method_" + method, new Class[] { account.getClass() } );
                result = (String) generatedMethod.invoke(this, new Object[] { account });
                String newCheck = getCheckString(result);
                result = checkResponse(rawNumber, format(account), getRangeStart(), getRangeLength(), newCheck);
            } catch (NumberFormatException exc) {
                result = checkResponse(rawNumber, BaseChecker.WRONG_CHAR);
            } catch (Exception exc) {
                result = checkResponse(rawNumber, BaseChecker.SYSTEM_ERROR);
            } // try
        } // not too long
        return result;
        // (rawNumber.equals(result)) ? account : result;
    } // check

    /** Gets a predefined set of test numbers.
     *  @return array of all testcases as strings
     */
    public String[] getTestCases() {
        return new String[]
            { "0123220600 50010060"   // from punctum/voba*.lst
            , "0166214666 59010066"
            , "1890182794 70020270"
            , "0020392207 68291200"
            , "0022019550 68050101"
            , "0002314509 67090000"
            , "0002832049 60050101"
            , "0031345753 66010075"
            , "0394060704 60010070"
            , "0000052603 50010060"
            , "0575818012 50040000"   // Commerzbank
            , "0494606612 20080000"   // Dresdner Bank, www.telexroll.de
            , "0068001507 68000000"
            , "7402045790 60050101"
            , "7805260    30050000"
            , "85995      66050000"
            , "97000018   68092000"
            , "WRONGACCTS 00000000"
            , "2062454    68052025"   // wrong, Sparkasse Noerdl. Breisgau
            , "63251      76350000"   // wrong, GI
            , "0575818112 50040000"   // Commerzbank, c.f. above
            , "0494606712 20080000"   // Dresdner Bank, c.f. above
            };
    } // getTestCases

    //-------------------------------------------------------------------------
    /** Special method 24
     */
    public String method_24_B(String account) {
        StringBuffer result = new StringBuffer(account);
        try {
            int weights[] = {1,2,3,1,2,3,1,2,3};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            int ipos = 10;
            switch (digit[ipos]) {
                case 3:
                case 4:
                case 5:
                case 6:
                    ipos = 9;
                    break;
                case 9:
                    ipos = 7;
                    break;
                default:
                    break;
            } // switch
            while (digit[ipos] == 0 && ipos > 1) {
                ipos --;
            }
            for (ipos = ipos; ipos >= 2; ipos --) {
                prod = digit[ipos] * weights[iweight];
                prod += weights[iweight];
                prod %= 11;
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum)); // insert digit into account
            }
            // System.out.print(" sum(24)=" + sum); // + ", result=" + result.toString());
        } catch (Exception exc) {
            System.out.println(exc.getMessage());
            exc.printStackTrace();
            result.setLength(0); // error
        }
        return result.toString();
    } // method_24_B

    /** Auxiliary method 52_53_common
     */
    public String method_52_53_common(int method, String account, String blz) {
        StringBuffer result = new StringBuffer(account);
        try {
            int weights[] = {2,4,8,5,10,9,7,3,6,1,2,4};
            // digits [C B A 9 8 7 6 5 4 3 2 1]
            int ipos = 6;
            while (digit[ipos] == 0 && ipos > 1) {
                ipos --;
            }
            // digits[ipos] now first digit != 0
            ipos ++;
            int ipz = ipos;
            int pzWeight = weights[ipz - 1];
            int pzDigit  = digit  [ipz];
            digit[ipos ++] = 0;
            if (method == 52) {
                digit[ipos ++] = digit[8];
                digit[ipos ++] = Character.digit(blz.charAt(7), 10);
                digit[ipos ++] = Character.digit(blz.charAt(6), 10);
                digit[ipos ++] = Character.digit(blz.charAt(5), 10);
                digit[ipos ++] = Character.digit(blz.charAt(4), 10);
            } else { // method 53
                int t          = digit[8];
                digit[ipos ++] = digit[9];
                digit[ipos ++] = Character.digit(blz.charAt(7), 10);
                digit[ipos ++] = t;
                digit[ipos ++] = Character.digit(blz.charAt(5), 10);
                digit[ipos ++] = Character.digit(blz.charAt(4), 10);
            }
            int ndig = ipos;
            sum = 0l;
            int iweight = 0; // index into weights
            for (ipos = 1; ipos < ndig; ipos ++) {
                int prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            int rest = (int) sum;
            ipos = 0;
            while ((rest + ipos * pzWeight) % 11 != 10 && ipos < 10) {
                ipos ++;
            }
            if (ipos < 10) {
                // result [0 1 2 3 4 5 6 7 8 9]
                //             X P X X X X X X
                result.setCharAt(3, CHAR_DIGITS.charAt(ipos)); // insert digit into account
            } else {
                result.setLength(0);
            }
            // System.out.print(" sum(52_53)=" + ipos); // + ", result=" + result.toString());
        } catch (Exception exc) {
            System.out.println(exc.getMessage());
            exc.printStackTrace();
            result.delete(0, result.length()); // error
        }
        return result.toString();
    } // method_52_53_common

    /** Special method 52
     */
    public String method_52_A(String account) {
        return method_52_53_common(52, account, getBLZ());
    } // method_52_A

    /** Special method 53
     */
    public String method_53_A(String account) {
        return method_52_53_common(53, account, getBLZ());
    } // method_53_A

    /** Special method 87
     */
    public String method_87_A(String account) {
        StringBuffer result = new StringBuffer(account);
        try {
            int i, c2, d2, a5, p;
            int konto[] = new int[LEN_ACCOUNT + 1];
            for (i = 1; i <= LEN_ACCOUNT; i ++) {
                konto[i] = digit[LEN_ACCOUNT + 1 - i];
            }
            int tab1[] = { 0, 4, 3, 2, 6 };
            int tab2[] = { 7, 1, 5, 9, 8 };
            boolean check_ok = false;
            i = 4;
            while ( i < 10 && konto[i] == 0) {
                i ++;
            }
            c2 = i % 2;
            d2 = 0;
            a5 = 0;
            while (i < 10) {
                switch (konto[i]) {
                    case 0:
                        konto[i] = 5;
                        break;
                    case 1:
                        konto[i] = 6;
                        break;
                    case 5:
                        konto[i] = 10;
                        break;
                    case 6:
                        konto[i] = 1;
                        break;
                    default:
                        break;
                } // switch
                if (c2 == d2) {
                    if (konto[i] > 5) {
                        if (c2 == 0 && d2 == 0) {
                            c2 = 1;
                            d2 = 1;
                            a5 = a5 + 6 - (konto[i] - 6);
                        } else {
                            c2 = 0;
                            d2 = 0;
                            a5 = a5 + konto[i];
                        }
                    } else {
                        if (c2 == 0 && d2 == 0) {
                            c2 = 1;
                            a5 = a5 + konto[i];
                        } else {
                            c2 = 0;
                            a5 = a5 + konto[i];
                        }
                    }
                } else {
                    if (konto[i] > 5) {
                        if (c2 == 0) {
                            c2 = 1;
                            d2 = 0;
                            a5 = a5 - 6 + (konto[i] - 6);
                        } else {
                            c2 = 0;
                            d2 = 1;
                            a5 = a5 - konto[i];
                        }
                    } else {
                        if (c2 == 0) {
                            c2 = 1;
                            a5 = a5 - konto[i];
                        } else {
                            c2 = 0;
                            a5 = a5 - konto[i];
                        }
                    }
                }
                i ++;
            } // while i < 10
            while (a5 < 0 || a5 > 4) {
                if (a5 > 4) {
                    a5 = a5 - 5;
                } else {
                    a5 = a5 + 5;
                }
            } // while a5
            if (d2 == 0) {
                p = tab1[a5];
            } else {
                p = tab2[a5];
            }
            if (p == konto[10]) {
                check_ok = true;
            } else {
                if (konto[4] == 0) {
                    if (p > 4) {
                        p = p - 5;
                    } else {
                        p = p + 5;
                    }
                    if (p == konto[10]) {
                        check_ok = true;
                    }
                }
            }
            if (! check_ok) {
                result.setLength(0); // wrong
                // System.out.println("code-87:" + p);
            } else {
                // System.out.println("code-87-ok");
            }
        } catch (Exception exc) {
            System.out.println(exc.getMessage());
            exc.printStackTrace();;
            result.delete(0, result.length()); // error
        }
        return result.toString();
    } // method_87

    
    /** Method 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_00(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(00)=" + sum);
            return result.toString();
        } // method_00

    /** Method 01
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_01(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {3,7,1,3,7,1,3,7,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(01)=" + sum);
            return result.toString();
        } // method_01

    /** Method 02
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_02(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8,9,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(02)=" + sum);
            return result.toString();
        } // method_02

    /** Method 03, like 01
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_03(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(03)=" + sum);
            return result.toString();
        } // method_03

    /** Method 04, like 02
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_04(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,2,3,4};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(04)=" + sum);
            return result.toString();
        } // method_04

    /** Method 05, like 01
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_05(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {7,3,1,7,3,1,7,3,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(05)=" + sum);
            return result.toString();
        } // method_05

    /** Method 06, like 02
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_06(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,2,3,4};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(06)=" + sum);
            return result.toString();
        } // method_06

    /** Method 07, like 02
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_07(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8,9,10};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(07)=" + sum);
            return result.toString();
        } // method_07

    /** Method 08, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_08(String account) {
            StringBuffer result = new StringBuffer(account);
            if (sum >= 0l && sum <= 60000l) {
                result = new StringBuffer(method_09(account));
            }
            else {
                result = new StringBuffer(method_00(account));
            }
            // System.out.print(" sum(08)=" + sum);
            return result.toString();
        } // method_08

    /** Method 09
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_09(String account) {
            StringBuffer result = new StringBuffer(account);
            setCheckRange(0, 0);
            // ok, result.equals(account)
            // System.out.print(" sum(09)=" + sum);
            return result.toString();
        } // method_09

    /** Method 10, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_10(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8,9,10};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(10)=" + sum);
            return result.toString();
        } // method_10

    /** Method 11, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_11(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8,9,10};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 9l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(11)=" + sum);
            return result.toString();
        } // method_11

    /** Method 12, unused, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_12(String account) {
            StringBuffer result = new StringBuffer(account);
            setCheckRange(0, 0);
            // ok, result.equals(account)
            // System.out.print(" sum(12)=" + sum);
            return result.toString();
        } // method_12

    /** Auxiliary Method 13_A
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_13_A(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(13_A)=" + sum);
            return result.toString();
        } // method_13_A

    /** Auxiliary Method 13_B
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_13_B(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(13_B)=" + sum);
            return result.toString();
        } // method_13_B

    /** Method 13, Commerzbank, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_13(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_13_A(account))) {
            } else
            if (account.equals(trial += method_13_B(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(13)=" + sum);
            return result.toString();
        } // method_13

    /** Method 14, like 02
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_14(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(14)=" + sum);
            return result.toString();
        } // method_14

    /** Method 15, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_15(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 5; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(15)=" + sum);
            return result.toString();
        } // method_15

    /** Method 16, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_16(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,2,3,4};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = digit[2];
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(16)=" + sum);
            return result.toString();
        } // method_16

    /** Method 17
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_17(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum --;
            sum %= 11l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(17)=" + sum);
            return result.toString();
        } // method_17

    /** Method 18, like 01
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_18(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {3,9,7,1,3,9,7,1,3};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(18)=" + sum);
            return result.toString();
        } // method_18

    /** Method 19, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_19(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8,9,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(19)=" + sum);
            return result.toString();
        } // method_19

    /** Method 20, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_20(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8,9,3};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(20)=" + sum);
            return result.toString();
        } // method_20

    /** Method 21, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_21(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum = sum % 10
                    + ((long) (sum /  10 + 0.5)) % 10
                    +  (long) (sum / 100 + 0.5)
                    ;
            sum = sum % 10
                    + ((long) (sum /  10 + 0.5)) % 10
                    +  (long) (sum / 100 + 0.5)
                    ;
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(21)=" + sum);
            return result.toString();
        } // method_21

    /** Method 22
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_22(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {3,1,3,1,3,1,3,1,3};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod %= 10;
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(22)=" + sum);
            return result.toString();
        } // method_22

    /** Method 23, like 16 (since 2001-09-03)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_23(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 5; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = digit[5];
            setCheckRange(4);
            if (sum != digit[4]) {
                result.setCharAt(LEN_ACCOUNT - 4, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            setCheckRange(4);
            if (sum != digit[4]) {
                result.setCharAt(LEN_ACCOUNT - 4, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(23)=" + sum);
            return result.toString();
        } // method_23

    /** Method 24
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_24(String account) {
            StringBuffer result = new StringBuffer(account);
                result = new StringBuffer(method_24_B(account));
            // System.out.print(" sum(24)=" + sum);
            return result.toString();
        } // method_24

    /** Method 25
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_25(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100000000l + 0.5);
            sum %= 10l;
            if (sum >= 8l && sum <= 9l) {
            int weights[] = {2,3,4,5,6,7,8,9};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            int weights[] = {2,3,4,5,6,7,8,9};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(25)=" + sum);
            return result.toString();
        } // method_25

    /** Method 26
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_26(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100000000l + 0.5);
            sum %= 100l;
            if (sum == 0l) {
            int weights[] = {2,3,4,5,6,7,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            int weights[] = {2,3,4,5,6,7,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(26)=" + sum);
            return result.toString();
        } // method_26

    /** Method 27
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_27(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000000l + 0.5);
            sum %= 10l;
            if (sum == 0l) {
                result = new StringBuffer(method_00(account));
            }
            else {
                result = new StringBuffer(method_29(account));
            }
            // System.out.print(" sum(27)=" + sum);
            return result.toString();
        } // method_27

    /** Method 28, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_28(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(28)=" + sum);
            return result.toString();
        } // method_28

    /** Method 29
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_29(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {0,1,2,3,4,1,2,3,4,1,0,1,5,9,3,7,4,8,2,6,0,1,7,6,9,8,3,2,5,4,0,1,8,4,6,2,9,5,7,3,0,1,2,3,4,5,6,7,8,9};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = weights[10 * weights[iweight + 1] + digit[ipos]];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(29)=" + sum);
            return result.toString();
        } // method_29

    /** Method 30, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_30(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,0,0,0,0,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(30)=" + sum);
            return result.toString();
        } // method_30

    /** Method 31
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_31(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {9,8,7,6,5,4,3,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(31)=" + sum);
            return result.toString();
        } // method_31

    /** Method 32, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_32(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(32)=" + sum);
            return result.toString();
        } // method_32

    /** Method 33, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_33(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(33)=" + sum);
            return result.toString();
        } // method_33

    /** Method 34, like 28
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_34(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,4,8,5,10,9,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(34)=" + sum);
            return result.toString();
        } // method_34

    /** Method 35, like 16
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_35(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8,9,10};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            if (sum == 10l) {
                sum = digit[2];
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(35)=" + sum);
            return result.toString();
        } // method_35

    /** Method 36, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_36(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,4,8,5};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 5; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(36)=" + sum);
            return result.toString();
        } // method_36

    /** Method 37, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_37(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,4,8,5,10};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(37)=" + sum);
            return result.toString();
        } // method_37

    /** Method 38, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_38(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,4,8,5,10,9};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(38)=" + sum);
            return result.toString();
        } // method_38

    /** Method 39, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_39(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,4,8,5,10,9,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(39)=" + sum);
            return result.toString();
        } // method_39

    /** Method 40, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_40(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,4,8,5,10,9,7,3,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(40)=" + sum);
            return result.toString();
        } // method_40

    /** Method 41, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_41(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            int weights[] = {2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            int weights[] = {2,1,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(41)=" + sum);
            return result.toString();
        } // method_41

    /** Method 42, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_42(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8,9};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(42)=" + sum);
            return result.toString();
        } // method_42

    /** Method 43
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_43(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {1,2,3,4,5,6,7,8,9};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(43)=" + sum);
            return result.toString();
        } // method_43

    /** Method 44, like 33
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_44(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,4,8,5,10};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(44)=" + sum);
            return result.toString();
        } // method_44

    /** Auxiliary Method 45_B
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_45_B(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100000l + 0.5);
            sum %= 10l;
            if (sum == 1l) {
                result = new StringBuffer(method_09(account));
            }
            else {
            int weights[] = {2,1,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(45_B)=" + sum);
            return result.toString();
        } // method_45_B

    /** Method 45, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_45(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000000l + 0.5);
            sum %= 10l;
            if (sum == 0l) {
                result = new StringBuffer(method_09(account));
            }
            else {
                result = new StringBuffer(method_45_B(account));
            }
            // System.out.print(" sum(45)=" + sum);
            return result.toString();
        } // method_45

    /** Method 46, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_46(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(46)=" + sum);
            return result.toString();
        } // method_46

    /** Method 47, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_47(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 3; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(2);
            if (sum != digit[2]) {
                result.setCharAt(LEN_ACCOUNT - 2, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(47)=" + sum);
            return result.toString();
        } // method_47

    /** Method 48, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_48(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 3; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(2);
            if (sum != digit[2]) {
                result.setCharAt(LEN_ACCOUNT - 2, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(48)=" + sum);
            return result.toString();
        } // method_48

    /** Auxiliary Method 49_1, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_49_1(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(49_1)=" + sum);
            return result.toString();
        } // method_49_1

    /** Auxiliary Method 49_2, like 01
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_49_2(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {3,7,1,3,7,1,3,7,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(49_2)=" + sum);
            return result.toString();
        } // method_49_2

    /** Method 49
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_49(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_00(account))) {
            } else
            if (account.equals(trial += method_01(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(49)=" + sum);
            return result.toString();
        } // method_49

    /** Auxiliary Method 50_A, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_50_A(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 5; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(4);
            if (sum != digit[4]) {
                result.setCharAt(LEN_ACCOUNT - 4, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(50_A)=" + sum);
            return result.toString();
        } // method_50_A

    /** Auxiliary Method 50_B, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_50_B(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(50_B)=" + sum);
            return result.toString();
        } // method_50_B

    /** Method 50
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_50(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_50_A(account))) {
            } else
            if (account.equals(trial += method_50_B(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(50)=" + sum);
            return result.toString();
        } // method_50

    /** Auxiliary Method 51_A, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_51_A(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(51_A)=" + sum);
            return result.toString();
        } // method_51_A

    /** Auxiliary Method 51_B, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_51_B(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(51_B)=" + sum);
            return result.toString();
        } // method_51_B

    /** Auxiliary Method 51_C, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_51_C(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1l + 0.5);
            sum %= 10l;
            if (sum >= 7l && sum <= 9l) {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            else {
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 7l;
            sum = 7l - sum;
            if (sum == 7l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(51_C)=" + sum);
            return result.toString();
        } // method_51_C

    /** Auxiliary Method 51_91, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_51_91(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(51_91)=" + sum);
            return result.toString();
        } // method_51_91

    /** Auxiliary Method 51_92, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_51_92(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8,9,10};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(51_92)=" + sum);
            return result.toString();
        } // method_51_92

    /** Method 51 (since 2004-09-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_51(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            String trial = "";
            if (account.equals(trial += method_51_91(account))) {
            } else
            if (account.equals(trial += method_51_92(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
            String trial = "";
            if (account.equals(trial += method_51_A(account))) {
            } else
            if (account.equals(trial += method_51_B(account))) {
            } else
            if (account.equals(trial += method_51_C(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(51)=" + sum);
            return result.toString();
        } // method_51

    /** Method 52
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_52(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
                result = new StringBuffer(method_20(account));
            }
            else {
                result = new StringBuffer(method_52_A(account));
            }
            // System.out.print(" sum(52)=" + sum);
            return result.toString();
        } // method_52

    /** Method 53
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_53(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
                result = new StringBuffer(method_20(account));
            }
            else {
                result = new StringBuffer(method_53_A(account));
            }
            // System.out.print(" sum(53)=" + sum);
            return result.toString();
        } // method_53

    /** Method 54
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_54(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100000000l + 0.5);
            sum %= 100l;
            if (sum == 49l) {
            int weights[] = {2,3,4,5,6,7,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 12l;
            }
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            // System.out.print(" sum(54)=" + sum);
            return result.toString();
        } // method_54

    /** Method 55, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_55(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8,7,8};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(55)=" + sum);
            return result.toString();
        } // method_55

    /** Method 56, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_56(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            int weights[] = {2,3,4,5,6,7,2,3,4};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 8l;
            }
            if (sum == 10l) {
                sum = 7l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            int weights[] = {2,3,4,5,6,7,2,3,4};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 12l;
            }
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(56)=" + sum);
            return result.toString();
        } // method_56

    /** Auxiliary Method 57_B
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_57_B(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10000l + 0.5);
            if (sum == 7777777l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum == 8888888l) {
                result = new StringBuffer(method_09(account));
            }
            else {
            int weights[] = {1,2,1,2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(57_B)=" + sum);
            return result.toString();
        } // method_57_B

    /** Method 57 (since 2002-04-03)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_57(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100000000l + 0.5);
            if (sum >= 0l && sum <= 50l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum >= 91l && sum <= 91l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum >= 96l && sum <= 99l) {
                result = new StringBuffer(method_09(account));
            }
            else {
                result = new StringBuffer(method_57_B(account));
            }
            // System.out.print(" sum(57)=" + sum);
            return result.toString();
        } // method_57

    /** Method 58, like 02 (since 2002-03-04)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_58(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(58)=" + sum);
            return result.toString();
        } // method_58

    /** Method 59, like 00 (since 2001-12-03)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_59(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100000000l + 0.5);
            if (sum == 0l) {
                result = new StringBuffer(method_09(account));
            }
            else {
                result = new StringBuffer(method_00(account));
            }
            // System.out.print(" sum(59)=" + sum);
            return result.toString();
        } // method_59

    /** Method 60, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_60(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(60)=" + sum);
            return result.toString();
        } // method_60

    /** Method 61, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_61(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10l + 0.5);
            sum %= 10l;
            if (sum == 8l) {
            int weights[] = {2,1,0,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 1; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            int weights[] = {2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(61)=" + sum);
            return result.toString();
        } // method_61

    /** Method 62, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_62(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(62)=" + sum);
            return result.toString();
        } // method_62

    /** Auxiliary Method 63_A
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_63_A(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(63_A)=" + sum);
            return result.toString();
        } // method_63_A

    /** Auxiliary Method 63_B
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_63_B(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(63_B)=" + sum);
            return result.toString();
        } // method_63_B

    /** Method 63, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_63(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000000l + 0.5);
            sum %= 10l;
            if (sum == 0l) {
            String trial = "";
            if (account.equals(trial += method_63_A(account))) {
            } else
            if (account.equals(trial += method_63_B(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            // System.out.print(" sum(63)=" + sum);
            return result.toString();
        } // method_63

    /** Method 64, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_64(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,4,8,5,10,9};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 5; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(4);
            if (sum != digit[4]) {
                result.setCharAt(LEN_ACCOUNT - 4, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(64)=" + sum);
            return result.toString();
        } // method_64

    /** Method 65, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_65(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            int weights[] = {2,1,0,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 1; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            int weights[] = {2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(65)=" + sum);
            return result.toString();
        } // method_65

    /** Method 66, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_66(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000000l + 0.5);
            sum %= 10l;
            if (sum == 0l) {
            int weights[] = {2,3,4,5,6,0,0,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 1l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            // System.out.print(" sum(66)=" + sum);
            return result.toString();
        } // method_66

    /** Method 67, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_67(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(67)=" + sum);
            return result.toString();
        } // method_67

    /** Auxiliary Method 68_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_68_1(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(68_1)=" + sum);
            return result.toString();
        } // method_68_1

    /** Auxiliary Method 68_2
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_68_2(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,0,0,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(68_2)=" + sum);
            return result.toString();
        } // method_68_2

    /** Auxiliary Method 68_10
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_68_10(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            int weights[] = {2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            // System.out.print(" sum(68_10)=" + sum);
            return result.toString();
        } // method_68_10

    /** Method 68, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_68(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100000000l + 0.5);
            sum %= 100l;
            if (sum == 4l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum <= 9l) {
            String trial = "";
            if (account.equals(trial += method_68_1(account))) {
            } else
            if (account.equals(trial += method_68_2(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
                result = new StringBuffer(method_68_10(account));
            }
            // System.out.print(" sum(68)=" + sum);
            return result.toString();
        } // method_68

    /** Method 69, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_69(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100000000l + 0.5);
            sum %= 100l;
            if (sum == 93l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum == 97l) {
                result = new StringBuffer(method_29(account));
            }
            else {
            String trial = "";
            if (account.equals(trial += method_28(account))) {
            } else
            if (account.equals(trial += method_29(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(69)=" + sum);
            return result.toString();
        } // method_69

    /** Method 70, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_70(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100000l + 0.5);
            sum %= 100l;
            if (sum >= 50l && sum <= 59l) {
                result = new StringBuffer(method_32(account));
            }
            else 
            if (sum == 69l) {
                result = new StringBuffer(method_32(account));
            }
            else {
                result = new StringBuffer(method_06(account));
            }
            // System.out.print(" sum(70)=" + sum);
            return result.toString();
        } // method_70

    /** Method 71, like 06
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_71(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {1,2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 1l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(71)=" + sum);
            return result.toString();
        } // method_71

    /** Method 72, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_72(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(72)=" + sum);
            return result.toString();
        } // method_72

    /** Auxiliary Method 73_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_73_1(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(73_1)=" + sum);
            return result.toString();
        } // method_73_1

    /** Auxiliary Method 73_2
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_73_2(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(73_2)=" + sum);
            return result.toString();
        } // method_73_2

    /** Auxiliary Method 73_3
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_73_3(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 7l;
            sum = 7l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(73_3)=" + sum);
            return result.toString();
        } // method_73_3

    /** Method 73, like 00 (since 2004-12-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_73(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            String trial = "";
            if (account.equals(trial += method_51_91(account))) {
            } else
            if (account.equals(trial += method_51_92(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
            String trial = "";
            if (account.equals(trial += method_73_1(account))) {
            } else
            if (account.equals(trial += method_73_2(account))) {
            } else
            if (account.equals(trial += method_73_3(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(73)=" + sum);
            return result.toString();
        } // method_73

    /** Auxiliary Method 74_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_74_1(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(74_1)=" + sum);
            return result.toString();
        } // method_74_1

    /** Auxiliary Method 74_2
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_74_2(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 5l;
            sum = 5l - sum;
            if (sum == 5l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(74_2)=" + sum);
            return result.toString();
        } // method_74_2

    /** Method 74, like 00 (since 2007-06-04)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_74(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 100000l && sum <= 999999l) {
            String trial = "";
            if (account.equals(trial += method_74_1(account))) {
            } else
            if (account.equals(trial += method_74_2(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
                result = new StringBuffer(method_74_1(account));
            }
            // System.out.print(" sum(74)=" + sum);
            return result.toString();
        } // method_74

    /** Method 75, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_75(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100000000l + 0.5);
            sum %= 100l;
            if (sum == 0l) {
            int weights[] = {2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else 
            if (sum == 9l) {
            int weights[] = {2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            int weights[] = {2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 5; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(4);
            if (sum != digit[4]) {
                result.setCharAt(LEN_ACCOUNT - 4, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(75)=" + sum);
            return result.toString();
        } // method_75

    /** Auxiliary Method 76_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_76_1(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 4; ipos <= 9; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            if (sum == 10l) {
                sum = 12l;
            }
            setCheckRange(3);
            if (sum != digit[3]) {
                result.setCharAt(LEN_ACCOUNT - 3, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(76_1)=" + sum);
            return result.toString();
        } // method_76_1

    /** Auxiliary Method 76_2
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_76_2(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(76_2)=" + sum);
            return result.toString();
        } // method_76_2

    /** Method 76, Dresdner Bank
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_76(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000000l + 0.5);
            String trial = "";
            if (account.equals(trial += method_76_1(account))) {
            } else
            if (account.equals(trial += method_76_2(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(76)=" + sum);
            return result.toString();
        } // method_76

    /** Auxiliary Method 77_2
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_77_2(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {5,4,3,4,5};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 1; ipos <= 5; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            if (sum == 0l) {
            setCheckRange(0, 0);
            // ok, result.equals(account)
            }
            else {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            // System.out.print(" sum(77_2)=" + sum);
            return result.toString();
        } // method_77_2

    /** Method 77
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_77(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {1,2,3,4,5};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 1; ipos <= 5; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            if (sum == 0l) {
            setCheckRange(0, 0);
            // ok, result.equals(account)
            }
            else {
                result = new StringBuffer(method_77_2(account));
            }
            // System.out.print(" sum(77)=" + sum);
            return result.toString();
        } // method_77

    /** Method 78
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_78(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000l + 0.5);
            if (sum == 0l) {
                result = new StringBuffer(method_09(account));
            }
            else {
                result = new StringBuffer(method_00(account));
            }
            // System.out.print(" sum(78)=" + sum);
            return result.toString();
        } // method_78

    /** Method 79
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_79(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000000l + 0.5);
            sum %= 10l;
            if (sum >= 3l && sum <= 8l) {
                result = new StringBuffer(method_00(account));
            }
            else 
            if (sum == 0l) {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            else {
            int weights[] = {2,1,2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 3; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(2);
            if (sum != digit[2]) {
                result.setCharAt(LEN_ACCOUNT - 2, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(79)=" + sum);
            return result.toString();
        } // method_79

    /** Auxiliary Method 80_A, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_80_A(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            // System.out.print(" sum(80_A)=" + sum);
            return result.toString();
        } // method_80_A

    /** Auxiliary Method 80_B, like 00
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_80_B(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 7l;
            sum = 7l - sum;
            if (sum == 7l) {
                sum = 0l;
            }
            // System.out.print(" sum(80_B)=" + sum);
            return result.toString();
        } // method_80_B

    /** Method 80 (since 2004-06-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_80(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            String trial = "";
            if (account.equals(trial += method_51_91(account))) {
            } else
            if (account.equals(trial += method_51_92(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
            String trial = "";
            if (account.equals(trial += method_80_A(account))) {
            } else
            if (account.equals(trial += method_80_B(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(80)=" + sum);
            return result.toString();
        } // method_80

    /** Method 81 (since 2004-09-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_81(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            String trial = "";
            if (account.equals(trial += method_51_91(account))) {
            } else
            if (account.equals(trial += method_51_92(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
                result = new StringBuffer(method_32(account));
            }
            // System.out.print(" sum(81)=" + sum);
            return result.toString();
        } // method_81

    /** Method 82
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_82(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000l + 0.5);
            sum %= 100l;
            if (sum == 99l) {
                result = new StringBuffer(method_10(account));
            }
            else {
                result = new StringBuffer(method_33(account));
            }
            // System.out.print(" sum(82)=" + sum);
            return result.toString();
        } // method_82

    /** Auxiliary Method 83_1C
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_83_1C(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1l + 0.5);
            sum %= 10l;
            if (sum >= 7l && sum <= 9l) {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            else {
                result = new StringBuffer(method_84_B(account));
            }
            // System.out.print(" sum(83_1C)=" + sum);
            return result.toString();
        } // method_83_1C

    /** Auxiliary Method 83_2A
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_83_2A(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(83_2A)=" + sum);
            return result.toString();
        } // method_83_2A

    /** Method 83
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_83(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000l + 0.5);
            sum %= 100l;
            if (sum == 99l) {
            String trial = "";
            if (account.equals(trial += method_83_2A(account))) {
            } else
            if (account.equals(trial += method_09(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
            String trial = "";
            if (account.equals(trial += method_32(account))) {
            } else
            if (account.equals(trial += method_33(account))) {
            } else
            if (account.equals(trial += method_83_1C(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(83)=" + sum);
            return result.toString();
        } // method_83

    /** Auxiliary Method 84_B
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_84_B(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 7l;
            sum = 7l - sum;
            if (sum == 7l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(84_B)=" + sum);
            return result.toString();
        } // method_84_B

    /** Method 84 (since 2004-09-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_84(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            String trial = "";
            if (account.equals(trial += method_51_91(account))) {
            } else
            if (account.equals(trial += method_51_92(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
            String trial = "";
            if (account.equals(trial += method_33(account))) {
            } else
            if (account.equals(trial += method_84_B(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(84)=" + sum);
            return result.toString();
        } // method_84

    /** Auxiliary Method 85_A
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_85_A(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(85_A)=" + sum);
            return result.toString();
        } // method_85_A

    /** Auxiliary Method 85_C
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_85_C(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 7l;
            sum = 7l - sum;
            if (sum == 7l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(85_C)=" + sum);
            return result.toString();
        } // method_85_C

    /** Auxiliary Method 85_D
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_85_D(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 12l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(85_D)=" + sum);
            return result.toString();
        } // method_85_D

    /** Method 85
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_85(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000l + 0.5);
            sum %= 100l;
            if (sum == 99l) {
                result = new StringBuffer(method_85_D(account));
            }
            else {
            String trial = "";
            if (account.equals(trial += method_32(account))) {
            } else
            if (account.equals(trial += method_33(account))) {
            } else
            if (account.equals(trial += method_83_1C(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(85)=" + sum);
            return result.toString();
        } // method_85

    /** Auxiliary Method 86_A
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_86_A(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(86_A)=" + sum);
            return result.toString();
        } // method_86_A

    /** Method 86 (since 2004-09-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_86(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            String trial = "";
            if (account.equals(trial += method_51_91(account))) {
            } else
            if (account.equals(trial += method_51_92(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
            String trial = "";
            if (account.equals(trial += method_86_A(account))) {
            } else
            if (account.equals(trial += method_32(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(86)=" + sum);
            return result.toString();
        } // method_86

    /** Method 87 (since 2004-09-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_87(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
            String trial = "";
            if (account.equals(trial += method_51_91(account))) {
            } else
            if (account.equals(trial += method_51_92(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
            String trial = "";
            if (account.equals(trial += method_87_A(account))) {
            } else
            if (account.equals(trial += method_33(account))) {
            } else
            if (account.equals(trial += method_84_B(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(87)=" + sum);
            return result.toString();
        } // method_87

    /** Auxiliary Method 88_A
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_88_A(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7,8};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(88_A)=" + sum);
            return result.toString();
        } // method_88_A

    /** Auxiliary Method 88_B
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_88_B(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(88_B)=" + sum);
            return result.toString();
        } // method_88_B

    /** Method 88
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_88(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
                result = new StringBuffer(method_88_A(account));
            }
            else {
                result = new StringBuffer(method_88_B(account));
            }
            // System.out.print(" sum(88)=" + sum);
            return result.toString();
        } // method_88

    /** Auxiliary Method 89_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_89_1(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(89_1)=" + sum);
            return result.toString();
        } // method_89_1

    /** Method 89
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_89(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum <  0001000000l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum >= 1000000l && sum <= 9999999l) {
                result = new StringBuffer(method_89_1(account));
            }
            else 
            if (sum >= 10000000l && sum <= 999999999l) {
                result = new StringBuffer(method_10(account));
            }
            else {
                result = new StringBuffer(method_09(account));
            }
            // System.out.print(" sum(89)=" + sum);
            return result.toString();
        } // method_89

    /** Auxiliary Method 90_D
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_90_D(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 9l;
            sum = 9l - sum;
            if (sum == 9l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(90_D)=" + sum);
            return result.toString();
        } // method_90_D

    /** Auxiliary Method 90_E
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_90_E(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(90_E)=" + sum);
            return result.toString();
        } // method_90_E

    /** Method 90 (since 2005-06-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_90(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10000000l + 0.5);
            sum %= 10l;
            if (sum == 9l) {
                result = new StringBuffer(method_85_D(account));
            }
            else {
            String trial = "";
            if (account.equals(trial += method_32(account))) {
            } else
            if (account.equals(trial += method_33(account))) {
            } else
            if (account.equals(trial += method_85_C(account))) {
            } else
            if (account.equals(trial += method_90_D(account))) {
            } else
            if (account.equals(trial += method_90_E(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(90)=" + sum);
            return result.toString();
        } // method_90

    /** Auxiliary Method 91_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_91_1(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 5; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(4);
            if (sum != digit[4]) {
                result.setCharAt(LEN_ACCOUNT - 4, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(91_1)=" + sum);
            return result.toString();
        } // method_91_1

    /** Auxiliary Method 91_2
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_91_2(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {7,6,5,4,3,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 5; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(4);
            if (sum != digit[4]) {
                result.setCharAt(LEN_ACCOUNT - 4, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(91_2)=" + sum);
            return result.toString();
        } // method_91_2

    /** Auxiliary Method 91_3
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_91_3(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,0,5,6,7,8,9,10};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 1; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(4);
            if (sum != digit[4]) {
                result.setCharAt(LEN_ACCOUNT - 4, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(91_3)=" + sum);
            return result.toString();
        } // method_91_3

    /** Auxiliary Method 91_4
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_91_4(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,4,8,5,10,9};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 5; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(4);
            if (sum != digit[4]) {
                result.setCharAt(LEN_ACCOUNT - 4, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(91_4)=" + sum);
            return result.toString();
        } // method_91_4

    /** Method 91 (since 2003-12-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_91(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_91_1(account))) {
            } else
            if (account.equals(trial += method_91_2(account))) {
            } else
            if (account.equals(trial += method_91_3(account))) {
            } else
            if (account.equals(trial += method_91_4(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(91)=" + sum);
            return result.toString();
        } // method_91

    /** Method 92
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_92(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {3,7,1,3,7,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(92)=" + sum);
            return result.toString();
        } // method_92

    /** Auxiliary Method 93_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_93_1(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000l + 0.5);
            if (sum == 0l) {
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 6; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            setCheckRange(5);
            if (sum != digit[5]) {
                result.setCharAt(LEN_ACCOUNT - 5, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(93_1)=" + sum);
            return result.toString();
        } // method_93_1

    /** Auxiliary Method 93_2
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_93_2(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000l + 0.5);
            if (sum == 0l) {
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 7l;
            sum = 7l - sum;
            if (sum == 7l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 6; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 7l;
            sum = 7l - sum;
            if (sum == 7l) {
                sum = 0l;
            }
            setCheckRange(5);
            if (sum != digit[5]) {
                result.setCharAt(LEN_ACCOUNT - 5, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(93_2)=" + sum);
            return result.toString();
        } // method_93_2

    /** Method 93
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_93(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_93_1(account))) {
            } else
            if (account.equals(trial += method_93_2(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(93)=" + sum);
            return result.toString();
        } // method_93

    /** Method 94
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_94(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {1,2,1,2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            // System.out.print(" sum(94)=" + sum);
            return result.toString();
        } // method_94

    /** Method 95
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_95(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 1l && sum <= 1999999l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum >= 9000000l && sum <= 25999999l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum >= 396000000l && sum <= 499999999l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum >= 700000000l && sum <= 799999999l) {
                result = new StringBuffer(method_09(account));
            }
            else {
            int weights[] = {2,3,4,5,6,7,2,3,4};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            }
            // System.out.print(" sum(95)=" + sum);
            return result.toString();
        } // method_95

    /** Auxiliary Method 96_3
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_96_3(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 1300000l && sum <= 99399999l) {
            setCheckRange(0, 0);
            // ok, result.equals(account)
            }
            else {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            // System.out.print(" sum(96_3)=" + sum);
            return result.toString();
        } // method_96_3

    /** Method 96
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_96(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_19(account))) {
            } else
            if (account.equals(trial += method_00(account))) {
            } else
            if (account.equals(trial += method_96_3(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(96)=" + sum);
            return result.toString();
        } // method_96

    /** Method 97
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_97(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 10l + 0.5);
            sum %= 11l;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(97)=" + sum);
            return result.toString();
        } // method_97

    /** Auxiliary Method 98_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_98_1(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {3,1,7,3,1,7,3,1,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(98_1)=" + sum);
            return result.toString();
        } // method_98_1

    /** Method 98
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_98(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_98_1(account))) {
            } else
            if (account.equals(trial += method_32(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(98)=" + sum);
            return result.toString();
        } // method_98

    /** Method 99 (since 2002-03-04)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_99(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 396000000l && sum <= 499999999l) {
                result = new StringBuffer(method_09(account));
            }
            else {
                result = new StringBuffer(method_06(account));
            }
            // System.out.print(" sum(99)=" + sum);
            return result.toString();
        } // method_99

    /** Method A0
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_A0(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 1l && sum <= 999l) {
                result = new StringBuffer(method_09(account));
            }
            else {
                result = new StringBuffer(method_44(account));
            }
            // System.out.print(" sum(A0)=" + sum);
            return result.toString();
        } // method_A0

    /** Method A1, like 00 (since 2003-06-09)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_A1(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 1l && sum <= 9999999l) {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            else 
            if (sum >= 100000000l && sum <= 999999999l) {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            else {
            int weights[] = {2,1,2,1,2,1,2,0,0};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(A1)=" + sum);
            return result.toString();
        } // method_A1

    /** Method A2 (since 2003-06-09)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_A2(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_00(account))) {
            } else
            if (account.equals(trial += method_04(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(A2)=" + sum);
            return result.toString();
        } // method_A2

    /** Method A3 (since 2003-09-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_A3(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_00(account))) {
            } else
            if (account.equals(trial += method_10(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(A3)=" + sum);
            return result.toString();
        } // method_A3

    /** Auxiliary Method A4_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_A4_1(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(A4_1)=" + sum);
            return result.toString();
        } // method_A4_1

    /** Auxiliary Method A4_2
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_A4_2(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6,7};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 7l;
            sum = 7l - sum;
            if (sum == 7l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(A4_2)=" + sum);
            return result.toString();
        } // method_A4_2

    /** Auxiliary Method A4_3
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_A4_3(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(A4_3)=" + sum);
            return result.toString();
        } // method_A4_3

    /** Auxiliary Method A4_4
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_A4_4(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(A4_4)=" + sum);
            return result.toString();
        } // method_A4_4

    /** Auxiliary Method A4_5
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_A4_5(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 6; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 7l;
            sum = 7l - sum;
            if (sum == 7l) {
                sum = 0l;
            }
            setCheckRange(5);
            if (sum != digit[5]) {
                result.setCharAt(LEN_ACCOUNT - 5, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(A4_5)=" + sum);
            return result.toString();
        } // method_A4_5

    /** Method A4 (since 2003-09-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_A4(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000l + 0.5);
            sum %= 100l;
            if (sum == 99l) {
            String trial = "";
            if (account.equals(trial += method_A4_3(account))) {
            } else
            if (account.equals(trial += method_93(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
            String trial = "";
            if (account.equals(trial += method_A4_1(account))) {
            } else
            if (account.equals(trial += method_A4_2(account))) {
            } else
            if (account.equals(trial += method_A4_3(account))) {
            } else
            if (account.equals(trial += method_93(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(A4)=" + sum);
            return result.toString();
        } // method_A4

    /** Method A5 (since 2003-06-09)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_A5(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 9000000000l && sum <= 9999999999l) {
                result = new StringBuffer(method_00(account));
            }
            else {
            String trial = "";
            if (account.equals(trial += method_00(account))) {
            } else
            if (account.equals(trial += method_10(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(A5)=" + sum);
            return result.toString();
        } // method_A5

    /** Method A6 (since 2003-12-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_A6(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 800000000l && sum <= 899999999l) {
                result = new StringBuffer(method_00(account));
            }
            else {
                result = new StringBuffer(method_01(account));
            }
            // System.out.print(" sum(A6)=" + sum);
            return result.toString();
        } // method_A6

    /** Method A7 (since 2003-09-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_A7(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_00(account))) {
            } else
            if (account.equals(trial += method_03(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(A7)=" + sum);
            return result.toString();
        } // method_A7

    /** Method A8 (since 2005-03-07)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_A8(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 90000000l && sum <= 99999999l) {
                result = new StringBuffer(method_51(account));
            }
            else {
            String trial = "";
            if (account.equals(trial += method_32(account))) {
            } else
            if (account.equals(trial += method_86_A(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            // System.out.print(" sum(A8)=" + sum);
            return result.toString();
        } // method_A8

    /** Method A9 (since 2004-03-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_A9(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_01(account))) {
            } else
            if (account.equals(trial += method_06(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(A9)=" + sum);
            return result.toString();
        } // method_A9

    /** Auxiliary Method B0_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_B0_1(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 100l + 0.5);
            sum %= 10l;
            if (sum >= 1l && sum <= 3l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum == 6l) {
                result = new StringBuffer(method_09(account));
            }
            else {
                result = new StringBuffer(method_06(account));
            }
            // System.out.print(" sum(B0_1)=" + sum);
            return result.toString();
        } // method_B0_1

    /** Method B0 (since 2004-12-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B0(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            sum = (long) (sum / 1000000000l + 0.5);
            sum %= 10l;
            if (sum == 0l) {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            else 
            if (sum == 8l) {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            else {
                result = new StringBuffer(method_B0_1(account));
            }
            // System.out.print(" sum(B0)=" + sum);
            return result.toString();
        } // method_B0

    /** Method B1 (since 2004-09-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B1(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_05(account))) {
            } else
            if (account.equals(trial += method_01(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(B1)=" + sum);
            return result.toString();
        } // method_B1

    /** Method B2 (since 2004-09-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B2(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 0l && sum <= 7999999999l) {
                result = new StringBuffer(method_02(account));
            }
            else {
                result = new StringBuffer(method_00(account));
            }
            // System.out.print(" sum(B2)=" + sum);
            return result.toString();
        } // method_B2

    /** Method B3 (since 2004-12-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B3(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 0l && sum <= 8999999999l) {
                result = new StringBuffer(method_32(account));
            }
            else {
                result = new StringBuffer(method_06(account));
            }
            // System.out.print(" sum(B3)=" + sum);
            return result.toString();
        } // method_B3

    /** Method B4 (since 2005-03-07)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B4(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 9000000000l && sum <= 9999999999l) {
                result = new StringBuffer(method_00(account));
            }
            else {
            int weights[] = {2,3,4,5,6,7,8,9,10};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            sum = 11l - sum;
            if (sum == 11l) {
                sum = 0l;
            }
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(B4)=" + sum);
            return result.toString();
        } // method_B4

    /** Method B5_A
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B5_A(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {7,3,1,7,3,1,7,3,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(B5_A)=" + sum);
            return result.toString();
        } // method_B5_A

    /** Method B5 (since 2005-06-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B5(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 0l && sum <= 7999999999l) {
            String trial = "";
            if (account.equals(trial += method_B5_A(account))) {
            } else
            if (account.equals(trial += method_00(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else {
                result = new StringBuffer(method_B5_A(account));
            }
            // System.out.print(" sum(B5)=" + sum);
            return result.toString();
        } // method_B5

    /** Method B6 (since 2005-09-05)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B6(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 1000000000l && sum <= 9999999999l) {
                result = new StringBuffer(method_20(account));
            }
            else {
                result = new StringBuffer(method_53(account));
            }
            // System.out.print(" sum(B6)=" + sum);
            return result.toString();
        } // method_B6

    /** Method B7 (since 2005-09-05)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B7(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 1000000l && sum <= 5999999l) {
                result = new StringBuffer(method_01(account));
            }
            else 
            if (sum >= 700000000l && sum <= 899999999l) {
                result = new StringBuffer(method_01(account));
            }
            else {
                result = new StringBuffer(method_09(account));
            }
            // System.out.print(" sum(B7)=" + sum);
            return result.toString();
        } // method_B7

    /** Method B8 (since 2005-09-05)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B8(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_20(account))) {
            } else
            if (account.equals(trial += method_29(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(B8)=" + sum);
            return result.toString();
        } // method_B8

    /** Auxiliary Method B9_1
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_B9_1(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {1,3,2,1,3,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 8; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = (digit[ipos] * weights[iweight] + weights[iweight]) % 11;
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            if (sum != digit[1] && (sum + 5l) % 10l != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(B9_1)=" + sum);
            return result.toString();
        } // method_B9_1

    /** Auxiliary Method B9_2
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    private String method_B9_2(String account) {
            StringBuffer result = new StringBuffer(account);
            int weights[] = {1,2,3,4,5,6};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 7; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 11l;
            if (sum != digit[1] && (sum + 5l) % 10l != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(B9_2)=" + sum);
            return result.toString();
        } // method_B9_2

    /** Method B9 (since 2005-12-05)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_B9(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 10000000l && sum <= 99999999l) {
                result = new StringBuffer(method_B9_1(account));
            }
            else 
            if (sum >= 1000000l && sum <= 9999999l) {
                result = new StringBuffer(method_B9_2(account));
            }
            else {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            // System.out.print(" sum(B9)=" + sum);
            return result.toString();
        } // method_B9

    /** Method C0 (since 2005-12-05)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_C0(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 10000000l && sum <= 99999999l) {
            String trial = "";
            if (account.equals(trial += method_52(account))) {
            } else
            if (account.equals(trial += method_20(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            }
            else 
            if (sum <  0010000000l) {
                result = new StringBuffer(method_20(account));
            }
            else {
                result = new StringBuffer(method_20(account));
            }
            // System.out.print(" sum(C0)=" + sum);
            return result.toString();
        } // method_C0

    /** Method C1 (since 2006-06-05)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_C1(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 5000000000l && sum <= 5999999999l) {
            int weights[] = {1,2,1,2,1,2,1,2,1};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 10; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum --;
            sum %= 11l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            else {
                result = new StringBuffer(method_17(account));
            }
            // System.out.print(" sum(C1)=" + sum);
            return result.toString();
        } // method_C1

    /** Method C2 (since 2006-06-05)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_C2(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_22(account))) {
            } else
            if (account.equals(trial += method_00(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(C2)=" + sum);
            return result.toString();
        } // method_C2

    /** Method C3 (since 2007-03-05)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_C3(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 9000000000l && sum <= 9999999999l) {
                result = new StringBuffer(method_58(account));
            }
            else {
                result = new StringBuffer(method_00(account));
            }
            // System.out.print(" sum(C3)=" + sum);
            return result.toString();
        } // method_C3

    /** Method C4 (since 2007-03-05)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_C4(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 9000000000l && sum <= 9999999999l) {
                result = new StringBuffer(method_58(account));
            }
            else {
                result = new StringBuffer(method_15(account));
            }
            // System.out.print(" sum(C4)=" + sum);
            return result.toString();
        } // method_C4

    /** Method C5 (since 2007-09-03)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_C5(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 100000l && sum <= 899999l) {
                result = new StringBuffer(method_75(account));
            }
            else 
            if (sum >= 100000000l && sum <= 899999999l) {
                result = new StringBuffer(method_75(account));
            }
            else 
            if (sum >= 1000000000l && sum <= 1999999999l) {
                result = new StringBuffer(method_29(account));
            }
            else 
            if (sum >= 4000000000l && sum <= 6999999999l) {
                result = new StringBuffer(method_29(account));
            }
            else 
            if (sum >= 9000000000l && sum <= 9999999999l) {
                result = new StringBuffer(method_29(account));
            }
            else 
            if (sum >= 3000000000l && sum <= 3999999999l) {
                result = new StringBuffer(method_00(account));
            }
            else 
            if (sum >= 30000000l && sum <= 59999999l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum >= 7000000000l && sum <= 7099999999l) {
                result = new StringBuffer(method_09(account));
            }
            else 
            if (sum >= 8500000000l && sum <= 8599999999l) {
                result = new StringBuffer(method_09(account));
            }
            else {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            // System.out.print(" sum(C5)=" + sum);
            return result.toString();
        } // method_C5

    /** Method C6 (since 2007-09-03)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_C6(String account) {
            StringBuffer result = new StringBuffer(account);
                    int vpos = "5499570".length();
                    int dpos = 10 - 1;
                    while (vpos > 0) {
                        digit[++ dpos] = Character.digit("5499570".charAt(-- vpos), 10);
                    } // while vpos
            int weights[] = {2,1,2,1,2,1,2,1,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 16; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            // System.out.print(" sum(C6)=" + sum);
            return result.toString();
        } // method_C6

    /** Method C7 (since 2007-12-03)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_C7(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_63(account))) {
            } else
            if (account.equals(trial += method_06(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(C7)=" + sum);
            return result.toString();
        } // method_C7

    /** Method C8 (since 2008-06-09)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_C8(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_00(account))) {
            } else
            if (account.equals(trial += method_04(account))) {
            } else
            if (account.equals(trial += method_07(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(C8)=" + sum);
            return result.toString();
        } // method_C8

    /** Method C9 (since 2008-06-09)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_C9(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_00(account))) {
            } else
            if (account.equals(trial += method_07(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(C9)=" + sum);
            return result.toString();
        } // method_C9

    /** Method D0 (since 2008-09-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_D0(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 5700000000l && sum <= 5799999999l) {
                result = new StringBuffer(method_09(account));
            }
            else {
                result = new StringBuffer(method_20(account));
            }
            // System.out.print(" sum(D0)=" + sum);
            return result.toString();
        } // method_D0

    /** Method D1 (since 2008-09-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_D1(String account) {
            StringBuffer result = new StringBuffer(account);
            sum = accountValue;
            if (sum >= 0l && sum <= 999999999l) {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            else 
            if (sum >= 3000000000l && sum <= 3999999999l) {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            else 
            if (sum >= 9000000000l && sum <= 9999999999l) {
            setCheckRange(0, 0);
            result.setLength(0); // error
            }
            else {
                    int vpos = "428259".length();
                    int dpos = 11 - 1;
                    while (vpos > 0) {
                        digit[++ dpos] = Character.digit("428259".charAt(-- vpos), 10);
                    } // while vpos
            int weights[] = {2,1,2,1,2,1,2,1,2,1,2,1,2,1,2};
            sum = 0l;
            int iweight = 0; // index into weights
            int prod = 0;
            for (int ipos = 2; ipos <= 16; ipos ++) {
                prod = digit[ipos] * weights[iweight];
                prod = prod % 10 + (int) (prod / 10 + 0.5);
                sum += prod;
                iweight ++;
            } // for ipos
            sum %= 10l;
            sum = 10l - sum;
            if (sum == 10l) {
                sum = 0l;
            }
            if (sum != digit[1]) {
                result.setCharAt(LEN_ACCOUNT - 1, CHAR_DIGITS.charAt((int) sum));
            }
            }
            // System.out.print(" sum(D1)=" + sum);
            return result.toString();
        } // method_D1

    /** Method D2 (since 2008-12-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_D2(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_95(account))) {
            } else
            if (account.equals(trial += method_00(account))) {
            } else
            if (account.equals(trial += method_68(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(D2)=" + sum);
            return result.toString();
        } // method_D2

    /** Method D3 (since 2008-09-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_D3(String account) {
            StringBuffer result = new StringBuffer(account);
            String trial = "";
            if (account.equals(trial += method_00(account))) {
            } else
            if (account.equals(trial += method_27(account))) {
            } else
            {
                result = new StringBuffer(trial.substring(0, LEN_ACCOUNT));
            }
            // System.out.print(" sum(D3)=" + sum);
            return result.toString();
        } // method_D3

    /** Method D4 (since 2010-06-07)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_D4(String account) {
            StringBuffer result = new StringBuffer(account);
            setCheckRange(0, 0);
            // ok, result.equals(account)
            // System.out.print(" sum(D4)=" + sum);
            return result.toString();
        } // method_D4

    /** Method D5 (since 2010-12-06)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_D5(String account) {
            StringBuffer result = new StringBuffer(account);
            setCheckRange(0, 0);
            // ok, result.equals(account)
            // System.out.print(" sum(D5)=" + sum);
            return result.toString();
        } // method_D5

    /** Method D6 (since 2008-09-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_D6(String account) {
            StringBuffer result = new StringBuffer(account);
            setCheckRange(0, 0);
            // ok, result.equals(account)
            // System.out.print(" sum(D6)=" + sum);
            return result.toString();
        } // method_D6

    /** Method D7 (since 2008-09-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_D7(String account) {
            StringBuffer result = new StringBuffer(account);
            setCheckRange(0, 0);
            // ok, result.equals(account)
            // System.out.print(" sum(D7)=" + sum);
            return result.toString();
        } // method_D7

    /** Method D8 (since 2008-09-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_D8(String account) {
            StringBuffer result = new StringBuffer(account);
            setCheckRange(0, 0);
            // ok, result.equals(account)
            // System.out.print(" sum(D8)=" + sum);
            return result.toString();
        } // method_D8

    /** Method D9 (since 2008-09-08)
     *  @param account number to be checked
     *  @return unchanged or corrected number, or empty string in case of a fatal error
     */
    public String method_D9(String account) {
            StringBuffer result = new StringBuffer(account);
            setCheckRange(0, 0);
            // ok, result.equals(account)
            // System.out.print(" sum(D9)=" + sum);
            return result.toString();
        } // method_D9

    /** Test Frame, reads lines with method id and account number,
     *  and check each.
     *  @param args commandline arguments as single strings
     */
    public static void main (String args[]) {
        try {
            DeAccountChecker checker = new DeAccountChecker();
            if (args.length == 0) {
                System.out.print(checker.checkTestCases());
            } else { // with args
                String blz = ""; // methods 52, 53 not yet
                String polar = ""; // "true" or "false"
                String line; // from test input file
                BufferedReader infile = new BufferedReader (new FileReader (args[0]));
                boolean busy = true; // for loop control
                String zeroes = "00000000000000000000000"; // many leading zeroes
                String oldMethod = "xx";
                while (busy) {
                    line = infile.readLine();
                    if (line == null) { // EOF
                        busy = false;
                    } else if (line.length() >= 4) {
                        // System.out.println("/" + line + "/");
                        String elements[] = line.split("\\s+");
                        String method = elements[0];
                        if (method.compareTo("00") >= 0 && method.compareTo("EE") <= 0) { // ignore other lines
                            if (! method.equals(oldMethod)) {
                                System.out.println();
                                oldMethod = method;
                            }
                            String account = elements[1];
                            if (account.length() > LEN_ACCOUNT) {
                                account = account.substring(0, LEN_ACCOUNT);
                            }
                            blz   = (elements.length >= 3) ? elements[2] : "00000000";
                            polar = (elements.length >= 4) ? elements[3] : "true";
                            String result = checker.check(method, account, blz); // returns account no. with correct(ed) check digit
                            result               = zeroes.substring(0, LEN_ACCOUNT - result .length()) + result;
                            String paddedAccount = zeroes.substring(0, LEN_ACCOUNT - account.length()) + account;
                            System.out.print(method + "\t");
                            System.out.print(method + " " + paddedAccount + " " + blz + " " + polar.substring(0, 1) + " ");
                            if (   polar.startsWith("t") &&   paddedAccount.equals(result)
                                || polar.startsWith("f") && ! paddedAccount.equals(result)) {
                                System.out.println(" !");
                            } else {
                                System.out.println(" ? " + result);
                            }
                        } // if relevant line
                    } // length >= 4
                } // while busy
            } // with args
        } catch (Exception exc) {
            System.out.println(exc.getMessage());
            exc.printStackTrace();
        } // catch
    } // main

} // DeAccountChecker
