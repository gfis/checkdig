/*
 *  Mapping from BLZ numbers to check m    ethods
 *  @(#)   $Id$
 *  2017-05-29T14:35:03: generated by test/blz/gen_blzmap.pl, DO NOT EDIT HERE!
 */
/*
 * Copyright 2006 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.teherba.checkdig.account;
import  java.io.BufferedReader;
import  java.io.FileReader;
import  java.util.HashMap;

/** Mapping from BLZ numbers to check methods.
 *  @author Dr. Georg Fischer
 */
public class BlzCheckMap {
    public final static String CVSID = "@(#) $Id$";

    /** Hash map for the BLZs with digit '0' in place 4 */
    private static HashMap/*<1.5*/<String, String>/*1.5>*/ map0 = new HashMap/*<1.5*/<String, String>/*1.5>*/(512);
    /** Hash map for the BLZs with digit '1' in place 4 */
    private static HashMap/*<1.5*/<String, String>/*1.5>*/ map1 = new HashMap/*<1.5*/<String, String>/*1.5>*/(512);
    /** Hash map for the BLZs with digit '2' in place 4 */
    private static HashMap/*<1.5*/<String, String>/*1.5>*/ map2 = new HashMap/*<1.5*/<String, String>/*1.5>*/(512);
    /** Hash map for the BLZs with digit '3' in place 4 */
    private static HashMap/*<1.5*/<String, String>/*1.5>*/ map3 = new HashMap/*<1.5*/<String, String>/*1.5>*/(512);
    /** Hash map for the BLZs with digit '4' in place 4 */
    private static HashMap/*<1.5*/<String, String>/*1.5>*/ map4 = new HashMap/*<1.5*/<String, String>/*1.5>*/(512);
    /** Hash map for the BLZs with digit '5' in place 4 */
    private static HashMap/*<1.5*/<String, String>/*1.5>*/ map5 = new HashMap/*<1.5*/<String, String>/*1.5>*/(512);
    /** Hash map for the BLZs with digit '6' in place 4 */
    private static HashMap/*<1.5*/<String, String>/*1.5>*/ map6 = new HashMap/*<1.5*/<String, String>/*1.5>*/(512);
    /** Hash map for the BLZs with digit '7' in place 4 */
    private static HashMap/*<1.5*/<String, String>/*1.5>*/ map7 = new HashMap/*<1.5*/<String, String>/*1.5>*/(512);
    /** Hash map for the BLZs with digit '8' in place 4 */
    private static HashMap/*<1.5*/<String, String>/*1.5>*/ map8 = new HashMap/*<1.5*/<String, String>/*1.5>*/(512);
    /** Hash map for the BLZs with digit '9' in place 4 */
    private static HashMap/*<1.5*/<String, String>/*1.5>*/ map9 = new HashMap/*<1.5*/<String, String>/*1.5>*/(512);
    static {
        map0.put("default", "09");

        map1.put("default", "09");
        map1.put("10010010", "24");
        map1.put("10010111", "13");
        map1.put("10010222", "10");

        map2.put("default", "60");

        map3.put("default", "0");

        map4.put("default", "0");

        map5.put("default", "0");

        map6.put("default", "0");

        map7.put("default", "0");

        map8.put("default", "0");

        map9.put("default", "0");

    }

    /** No-args constructor
     */
    public BlzCheckMap() {
    } // BlzCheckMap

    /** Gets the check method number for a BLZ
     *      @param blz BLZ for which the check method should be determined
     *  @return check met    hod number (00..99..A9..B8)
     */
    public String getMethod(String blz) {
        Object result = "";
        try {
            char blz4 = blz.charAt(3);
                // digit at position 4 = net id
            switch (blz4) {
                case '0':
                    result = map0.get(blz);
                    if (result == null) {
                        result = map0.get("default");
                    }
                    break;
                case '1':
                    result = map1.get(blz);
                    if (result == null) {
                        result = map1.get("default");
                    }
                    break;
                case '2':
                    result = map2.get(blz);
                    if (result == null) {
                        result = map2.get("default");
                    }
                    break;
                case '3':
                    result = map3.get(blz);
                    if (result == null) {
                        result = map3.get("default");
                    }
                    break;
                case '4':
                    result = map4.get(blz);
                    if (result == null) {
                        result = map4.get("default");
                    }
                    break;
                case '5':
                    result = map5.get(blz);
                    if (result == null) {
                        result = map5.get("default");
                    }
                    break;
                case '6':
                    result = map6.get(blz);
                    if (result == null) {
                        result = map6.get("default");
                    }
                    break;
                case '7':
                    result = map7.get(blz);
                    if (result == null) {
                        result = map7.get("default");
                    }
                    break;
                case '8':
                    result = map8.get(blz);
                    if (result == null) {
                        result = map8.get("default");
                    }
                    break;
                case '9':
                    result = map9.get(blz);
                    if (result == null) {
                        result = map9.get("default");
                    }
                    break;
            } // switch
        } catch (Exception exc) {
            System.out.println(exc.getMessage());
            exc.printStackTrace( );
        } // catch
        return (String) result;
    } // getMethod

    /** Test Frame, read lines with method id, account number, blz
     *  and check whether the same method is returned by <em>getMethod</em>.
     *  @param args commandli    ne arguments: input-filename
     */
    public static void main (String args[]) {
        try {
            int iarg = 0; // index in args
            int iadd = 1; // default: insert before 1st element
            int irep = 0; // do not replace
            int iblz = 2; //  default: BLZ in 2nd element
            while (iarg < args.length && args[iarg].startsWith("-")) {
                String opt = args[iarg ++];
                if (false) {
                } else if (opt.startsWith("-b")) {
                    if (opt.length() > 2) {
                        iblz = Integer.parseInt(opt.substring(2));
                    } else {
                        iblz = Integer.parseInt(args[iarg ++]);
                    }
                } else if (opt.startsWith("-a")) {
                    irep = 0;
                    if (opt.length() > 2) {
                        iadd = Integer.parseInt(opt.substring(2));
                    } else {
                        iadd = Integer.parseInt(args[iarg ++]);
                    }
                } else if (opt.startsWith("-r")) {
                    iadd = 0;
                    if (opt.length() > 2) {
                        irep = Integer.parseInt(opt.substring(2));
                    } else {
                        irep = Integer.parseInt(args[iarg ++]);
                    }
                }
            } // while iarg
            String line; // from test input file
            BufferedReader infile = new BufferedReader (new FileReader (args[iarg ++]));
            boolean busy = true; // for loop control
            BlzCheckMap mapper = new BlzCheckMap();

            while (busy) {
                line = infile.readLine();
                if (line == null) { // EOF
                    busy = false;
                } else { // not EOF
                    if (line.length() >= 4 && ! line.startsWith("#")) {
                        line = line.trim();
                        String  elements[]   = line.split("\\s+");
                        String blz      = elements[iblz - 1];
                        String method   = mapper.getMethod(blz);
                        if (iadd > 0) { // insert before elements[iadd - 1]
                            for (int ielem = 0; ielem < elements.length; ielem ++) {
                                if (iadd - 1 == ielem) {
                                    System.out.print(method + "\t");
                                }
                                if (ielem > 0) {
                                    System.out.print("\t");
                                }
                                System.out.print(elements[ielem]);
                            } // for ielem
                        } else { // replace elements[irep - 1]
                            elements[irep - 1] = method;
                            for (int ielem = 0; ielem < elements.length; ielem ++) {
                                if (ielem > 0) {
                                    System.out.print("\t");
                                }
                                System.out.print(elements[ielem]);
                            } // for ielem
                        }
                        System.out.println();
                    } // length >= 4
                    else {
                        System.out.println(line);
                    }
                } // not EOF
            } // while busy
        } // try
        catch (Exception exc) {
            System.out.println(exc.getMessage());
            exc.printStackTrace();
        } // catch
    } // main
} // BlzCheckMap
