/*  ISMNRanges.java - country groups and publisher ranges in International Standard Numbers (ISMNs)
    @$Id$
    generated by etc/isbn/gen_ranges.pl, do not edit here!

    Activation (test data at the end of this source program):
        java -cp dist/checkdig.jar org.teherba.checkdig.ISMNRanges group-id
*/
/*
 * Copyright 2008 Dr. Georg Fischer <punctum at punctum dot kom>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.teherba.checkdig;
import  org.teherba.checkdig.BaseChecker;

/** Class for the definition of publisher ranges in International Standard Numbers (ISMNs)
 *  @author Dr. Georg Fischer
 */
public class ISMNRanges {
    public final static String CVSID = "@(#) $Id: gen_ranges.pl 76 2009-01-09 07:12:30Z gfis ISMNRanges.java 37 2008-09-08 06:11:04Z gfis $";

    /** No-args constructor
     */
    public ISMNRanges() {
        super();
    } // constructor

    /** number of elements in a range tuple */
    private static final int RANGE_LEN = 3;

    /** Array of 9-digit numbers defining the publisher ranges for all country groups.
     *  The array stores tuples (low number, high number, range-width) for all number ranges,
     *  The first tuple (0, 0, 0) is not used.
     */
    private static long[] RANGES = new long[] { 0L, 0L, 0L // dummy tuple
                ,         0L,   9999999L, 3L //    3
                ,  10000000L,  39999999L, 4L //    6
                ,  40000000L,  69999999L, 5L //    9
                ,  70000000L,  89999999L, 6L //   12
                ,  90000000L,  99999999L, 7L //   15
                    // 3L, 5L, group      0: General suggestions
                }; // RANGES

    /** width of all ISMN numbers, without check digit and EAN bookland code */
    private static final int WIDTH = 9;

    /** number of elements in a group tuple */
    private static final int GROUP_LEN = 5;

    /** Array of group (country) descriptors  as tuples
     *  (low number, high number, group-width, range-index, range-count). The latter
     *  is an anchor into RANGES where the number of preceeding range tuples
     *  can be found.
     *  The first tuple is not used.
     */
    private static long[] GROUPS = new long[] { 0L, 0L, 0L, 0L, 0L // dummy tuple
                ,         0L,  99999999L,  1L,     3L,  5L // group      0: General suggestions
                }; // GROUPS

    /** Prints the ranges for the specified country group.
     *  @param group print ranges for this group
     */
    protected void print(String group) {
        long grp = 300000000L;
        //         123456789
        try {
            grp = Long.parseLong(this.trim(group));
        } catch (Exception exc) {
            // ignore, default set above
        }
        int igrp = GROUP_LEN; // skip [0]
        while (igrp < GROUPS.length) {
            if (grp >= GROUPS[igrp + 0] && grp <= GROUPS[igrp + 1]) { // found
                int rindex = (int) GROUPS[igrp + 3];
                int rcount = (int) GROUPS[igrp + 4];
                while (rcount > 0) {
                    System.out.println("[" + rindex + "]: " + RANGES[rindex + 0] + ", " + RANGES[rindex + 1] + " - " + RANGES[rindex + 2]);
                    rindex += RANGE_LEN;
                    rcount --;
                } // while rcount
                igrp = GROUPS.length; // break loop
            } // found
            igrp += GROUP_LEN;
        } // while igrp
    } // print

    /** Removes all spaces und punctuation from an ISMN-10 or ISMN-13.
     *  @param rawIsbn trim this number, may contain hyphens, dots or spaces
     */
    public String trim(String rawIsbn) {
        return rawIsbn.replaceAll("[\\-\\. ]", "").toUpperCase(); // because of trailing "x"
    } // trim

    /** Formats an ISMN-10 or ISMN-13 and inserts hyphens after the bookland (if any),
     *  the country group, the publisher code and before the check digit.
     *  @param rawIsbn format this number, may contain hyphens, dots or spaces
     */
    public String format(String rawIsbn) {
        StringBuffer result = new StringBuffer();
        String ismn = this.trim(rawIsbn);
        String ismn9 = "";
        String check = "-";
        int groupWidth = 0;
        int rangeWidth = 0;
        long num = 300000000L;
        //         123456789
        switch (ismn.length()) {
            case 10:
                ismn9 = ismn.substring( 0,  9); // without check digit
                check = ismn.substring( 9, 10);
                break;
            case 13:
                result.append(ismn.substring(0, 3)); // bookland 978, 979
                result.append('-');
                ismn9 = ismn.substring( 3, 12); // without bookland and check digit
                check = ismn.substring(12, 13);
                break;
            default:
                result.append(ismn);
                result.append("/wrong_length");
        } // switch length
        try {
            num = Long.parseLong(ismn9);
            int gindex = GROUP_LEN; // skip [0]
            while (gindex < GROUPS.length) {
                if (num >= GROUPS[gindex + 0] && num <= GROUPS[gindex + 1]) { // found
                    groupWidth = (int) GROUPS[gindex + 2];
                    int rindex = (int) GROUPS[gindex + 3];
                    int rcount = (int) GROUPS[gindex + 4];
                    while (rcount > 0) { // loop2
                    /*
                        System.out.println("[" + rindex + "]: " + RANGES[rindex + 0]
                                + ", " + RANGES[rindex + 1] + " - " + RANGES[rindex + 2]);
                    */
                        if (num >= RANGES[rindex + 0] && num <= RANGES[rindex + 1]) { // found2
                            rangeWidth = (int) RANGES[rindex + 2];
                            rcount = 0; // break loop2
                        } // found2
                        rindex += RANGE_LEN;
                        rcount --;
                    } // while rcount
                    gindex = GROUPS.length; // break loop
                } // found
                gindex += GROUP_LEN;
            } // while gindex loop
        } catch (Exception exc) {
            // ignore, default set above
        }
        if (groupWidth > 0 && rangeWidth > 0) {
            result.append(ismn9.substring(0, groupWidth));
            result.append('-');
            result.append(ismn9.substring(groupWidth, groupWidth + rangeWidth));
            result.append('-');
            result.append(ismn9.substring(            groupWidth + rangeWidth));
            result.append('-');
            result.append(check);
        } else {
            result.append(ismn9);
            result.append(check);
            result.append(' ');
            result.append(BaseChecker.WRONG_RANGE);
        }
        return result.toString();
    } // format

    /** Test Frame, prints all ranges for the specified country group.
     *  @param args commandline arguments:
     *  <ul>
     *  <li>args[0] = country group (1-6 digits, default 3x = German speaking countries)
     *  </ul>
     */
    public static void main (String args[]) {
        try {
            ISMNRanges ranges = new ISMNRanges();
            String group = "300000000";
            if (args.length > 0) {
                String ismn = args[0];
                System.out.println(ranges.format(ismn));
            } else {
                ranges.print(group);
            }
        } catch (Exception exc) {
            System.err.println(exc.getMessage());
            exc.printStackTrace();
        } // catch
    } // main

} // ISMNRanges

