#!/usr/bin/perl

#
#  Copyright 2006 Dr. Georg Fischer <punctum at punctum dot kom>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a   copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable  law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing p ermissions and
#  limitations under the License.
#
#------------------------------------------------------------
#   Mapping from BLZ numbers to check methods
#   @(#) $Id$
#   2017-05-29T14:35:03: generated by gen_blzmap.pl, DO NOT EDIT HERE!
#------------------------------------------------------------

use strict;
#-----------------------------------------
    # Hash map for the BLZs with digit '0' in place 4
    my %map0 = ("default", "09"
        );
    # Hash map for the BLZs with digit '1' in place 4
    my %map1 = ("default", "09"
        , "10010010", "24"
        , "10010111", "13"
        , "10010222", "10"
        );
    # Hash map for the BLZs with digit '2' in place 4
    my %map2 = ("default", "60"
        );
    # Hash map for the BLZs with digit '3' in place 4
    my %map3 = ("default", "0"
        );
    # Hash map for the BLZs with digit '4' in place 4
    my %map4 = ("default", "0"
        );
    # Hash map for the BLZs with digit '5' in place 4
    my %map5 = ("default", "0"
        );
    # Hash map for the BLZs with digit '6' in place 4
    my %map6 = ("default", "0"
        );
    # Hash map for the BLZs with digit '7' in place 4
    my %map7 = ("default", "0"
        );
    # Hash map for the BLZs with digit '8' in place 4
    my %map8 = ("default", "0"
        );
    # Hash map for the BLZs with digit '9' in place 4
    my %map9 = ("default", "0"
        );
main:
    #   Test Frame, read lines with method id, account number, blz
    #   and check whether the same method is returned by <em>getmethod</em>.
    #   activation:
    #   perl add_method.pl [-b n [-a m | -r m]] input-filename
    #       -b  column number of BLZ (1,2 ..., default 2)
    #       -a  a  dd method before this column number (default 1)
    #       -r  replace method in this column number
    #
    my $iblz = 2;
    my $iadd = 1;
    my $irep = 0;
    my  $opt;
    while (scalar (@ARGV) > 0 && $ARGV[0] =~ m[\A\-]) {
        $opt = shift (@ARGV);
        if (0) {
        } elsif ($opt =~ m[b]) {
            if ($opt =~ m[(\d+)]) {
                $iblz = $1;
            } else {
                $iblz = shift (@ARGV);
            }
        } elsif ($opt =~ m[a]) {
            $irep = 0;
            if ($opt =~ m[(\d+)]) {
                $iadd = $1;
            } else {
                $iadd = shift (@ARGV);
            }
        } elsif ($opt =~ m[r]) {
            $iadd = 0;
            if ($opt =~ m[(\d+)]) {
                $irep = $1;
            } else {
                $irep = shift (@ARGV);
            }
        }
    } # while options

    if (0) {
        print "iblz=$iblz, iadd=$iadd, irep=$irep\n";
        print "50040033->", $map4{"50040033"}, ";\n";
        print "50040000->", $map4{"50040000"}, ";\n";
        print "default->" , $map4{"default"}, ";\n";
    }
    while (<>) {
        next if length ($_) < 4 || m[\A\#];
        s[\s+\Z][]; # chompr
        my @elements = split;
        my $blz = $elements[$iblz - 1];
        # print "iblz=$iblz, iadd=$iadd, irep=$irep, blz=$blz;\n";
        my $method = & get_method ($blz);
        next if $method eq "09";
        if ($iadd > 0) {
            splice (@elements, $iadd - 1, 0, ($method)); # insert it
        }
        else { # $irep > 0 - replace it
            $elements[$irep - 1] = $method;
        }
        print join ("\ \ \ \ ", @elements), "\n";
    } # while <>
#-----------------------------------------
sub get_method {
    #   Gets the check method number for a BLZ
    #   @param blz BLZ for which the check method should be determined
    #   @return check method number (00..99..A9..B8)

    my $result;
    my $d = ""; # or "" if not to ignore "default" BLZs
    my ($blz) = @_;
    my $blz4 = substr($blz, 3, 1); # digit at position 4 = net id
    if (0) {
    } elsif ($blz4 eq "0") {
        $result = $map0{$blz};
        if ($result eq "") {
"
            $result = $d . $map0{"default"};
        }
    } elsif ($blz4 eq "1") {
        $result = $map1{$blz};
        if ($result eq "") {
"
            $result = $d . $map1{"default"};
        }
    } elsif ($blz4 eq "2") {
        $result = $map2{$blz};
        if ($result eq "") {
"
            $result = $d . $map2{"default"};
        }
    } elsif ($blz4 eq "3") {
        $result = $map3{$blz};
        if ($result eq "") {
"
            $result = $d . $map3{"default"};
        }
    } elsif ($blz4 eq "4") {
        $result = $map4{$blz};
        if ($result eq "") {
"
            $result = $d . $map4{"default"};
        }
    } elsif ($blz4 eq "5") {
        $result = $map5{$blz};
        if ($result eq "") {
"
            $result = $d . $map5{"default"};
        }
    } elsif ($blz4 eq "6") {
        $result = $map6{$blz};
        if ($result eq "") {
"
            $result = $d . $map6{"default"};
        }
    } elsif ($blz4 eq "7") {
        $result = $map7{$blz};
        if ($result eq "") {
"
            $result = $d . $map7{"default"};
        }
    } elsif ($blz4 eq "8") {
        $result = $map8{$blz};
        if ($result eq "") {
"
            $result = $d . $map8{"default"};
        }
    } elsif ($blz4 eq "9") {
        $result = $map9{$blz};
        if ($result eq "") {
"
            $result = $d . $map9{"default"};
        }
    }
    return $result;
} # sub get_method
#-----------------------------------------
